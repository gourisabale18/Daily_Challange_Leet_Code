1)Two Sum
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.


class Solution {
    public int[] twoSum(int[] nums, int target) {
        //key value pair since we need to store values and indices
        HashMap <Integer,Integer> hmap=new HashMap<Integer,Integer>();
        int secondNo=0;
        for(int i=0;i<nums.length;i++)
        {
            secondNo=target-nums[i];
            if(hmap.keySet().contains(secondNo))
            {
                //get method will return value based on the key..since we need index as output ,we store them as value
                return new int[] {hmap.get(secondNo),i};
            }
            hmap.put(nums[i],i);
        }
        return new int[0];
    }
}

Best Time to Buy and Sell Stock
You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

class Solution {
    public int maxProfit(int[] prices) {

        int min=0;
        min=prices[0];
        int maxProfit=0;
        if(prices.length==0)
        {
            return 0;
        }
       for(int i=1;i<prices.length;i++)
       {
            if(prices[i]<min)
            {
                min=prices[i];
            }
            //find difference between min stock and current stock in array
            if(prices[i]-min>maxProfit)
            {
                maxProfit=prices[i]-min;
            }
       }
       //greatest difference when first no is smallest and second noislargest
       return maxProfit;
	   
    }
}

3)Contains Duplicate

Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

class Solution {
    public boolean containsDuplicate(int[] nums) {
        HashSet<Integer> hset=new HashSet<>();
        
        for(int i=0;i<nums.length;i++)
        {
           // if set already contains that element ,then we found duplicate
            if(hset.contains(nums[i]))
            {
                return true;
            }
            //new no then add into set
            hset.add(nums[i]);
        }
        return false;
        
    }
}


Maximum Subarray Problem

class Solution {
    public int maxSubArray(int[] nums) {
        int len=nums.length;
        int[] target=new int[len];
        target[0]=nums[0];
        int max=nums[0];
       for(int i=1;i<len;i++)
       {
           target[i]=Math.max(nums[i],nums[i]+target[i-1]);
          max=Math.max(max,target[i]);
       }
       return max;
    }
}


ANother Solution without using new array

class Solution {
    public int maxSubArray(int[] nums) {
        if(nums.length==0)
        {
            return 0;
        }
        int len=nums.length;
		
        int tempSum=nums[0];
        int maxSum=nums[0];
       for(int i=1;i<len;i++)
       {
	   //tempSum holds max sum till prev element and then we compare it with current elemenet to change max
           tempSum=Math.max(nums[i],nums[i]+tempSum);
		   //reaasign maxSum to tempSUm if its greater
          maxSum=Math.max(maxSum,tempSum);
       }
       return maxSum;
    }
}


//Max product Subarray

Product consider -ve no.
class Solution {
    public int maxProduct(int[] nums) {
      
        int maxProduct=nums[0];
        int minProduct=nums[0];
        int sol=nums[0];
        if(nums.length==0)
        {
            return 0;
        }
        for(int i=1;i<nums.length;i++)
        {
            //calculate temp product with min value
            int temp1=Math.min(nums[i]*minProduct,nums[i]*maxProduct);
            //calculate temp product with max value
            int temp2=Math.max(nums[i]*minProduct,nums[i]*maxProduct);
            minProduct=Math.min(nums[i],temp1);
            maxProduct=Math.max(nums[i],temp2);
            sol=Math.max(maxProduct,sol);
        }
        return sol;
    }
}