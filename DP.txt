You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 
class Solution {
    //declare memo outside class for easy accessbility
     HashMap<Integer,Integer> memo=new HashMap<Integer,Integer>();
    public int climbStairs(int n) {

        //Dynamic Programming Problem
        //Top Down
       
        return dp(n);
        
    }
    public int dp(int i)
    {

            
      //dp(1)=1  dp(2)=2 ways  1-1 ,2
        if(i==1 || i==2)
        {
            return i;
        } 
        if(!memo.containsKey(i))
        {
            memo.put(i,dp(i-1)+dp(i-2));
        }
        return memo.get(i);
    }
}


https://leetcode.com/problems/house-robber/

You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


class Solution {
    HashMap<Integer,Integer> memo=new HashMap<Integer,Integer>();
    private int[] nums;
    public int rob(int[] nums) {
        this.nums=nums;
        return dp(nums.length-1);
        
    }
    public int dp(int i)
    {
        if(i==0)
        {
        return nums[0];
        }
        if(i==1)
        {
            return Math.max(nums[0],nums[1]);
        }
        if(!memo.containsKey(i))
        {
            memo.put(i,Math.max(dp(i-1),dp(i-2)+nums[i]));
        }
        return memo.get(i);
    }
}