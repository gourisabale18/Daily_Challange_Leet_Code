//Binary Search Problem
1)
class Solution {
    public int search(int[] nums, int target) {
        int l=0;
        int h=nums.length-1;
        int m=0;
        while(l<=h){
            m=(l+h)/2;
            if(nums[m]==target)
            {
                return m;
            }
            else if(nums[m]<target)
            {
                l=m+1;
            }
            else
            {
                h=m-1;
            }
        }
        return -1;
        
    }
}

//Left Most BinarySearch
2)
If the element exists, finds its leftmost index
If it doesnâ€™t exists, locate the index of where it should be

O(log n)

Code:

int l=0;
int r=nums.length;
int m;

while(l<r)
{
	
	m=(l+r)/2;
	if(nums[m]<target)
	{
		l=m+1; //target has high value than mid
	
	}
	else
	{
		r=m; //target has value low/equal to mid
	}
	
}
return l; //returning leftmost index 

3)Find First and Last Position of Element in Sorted Array

class Solution {
    public int[] searchRange(int[] nums, int target) {
        //get the first occurance or leftmost index if element exists
        int l=doBinarySearch(nums,target);
        //if that element does not exist
        if(l==nums.length || nums[l]!=target)
        {
            return new int[]{-1,-1};
        }
        //to get rightmost index of an element in an array,we will add one
       // into target element so that we will get exact index of its next
        //element ,and then we will subtract 1 from target
        int r=doBinarySearch(nums,target+1);
        return new int[]{l,r-1};
    }
    public int doBinarySearch(int[] nums,int target)
    {
        int l=0;
        int r=nums.length;
        int m=0;
        while(l<r)
        {
            m=(l+r)/2;
            if(nums[m]<target)
            {
                l=m+1;
            }
            else
            {
                r=m;
            }
        }//end while
        return l;
    }
}

4)Given an integer array nums sorted in non-decreasing order and an integer target, return true
 if target is a majority element, or false otherwise.

A majority element in an array nums is an element that appears more than nums.length / 2 times in
 the array.


class Solution {
    public boolean isMajorityElement(int[] nums, int target) {
        int l=doBinarySearch(nums,target);
        if(l==nums.length || nums[l]!=target)
        {
            return false;
        }
        int r=doBinarySearch(nums,target+1);
        //next after target occurance is r ,last occurance of target is r-1
        //so its count r-1-l+1=r-l
        int occurrance=r-l;
        //chk for majority element
        if(occurrance>(nums.length/2))
        {
            return true;
        }
        else
        {
            return false;
        }
       
    }
     public int doBinarySearch(int[] nums,int target)
    {
        int l=0;
        int r=nums.length;
        int m=0;
        while(l<r)
        {
            m=(l+r)/2;
            if(nums[m]<target)
            {
                l=m+1;
            }
            else
            {
                r=m;
            }
        }//end while
        return l;
    }
}

5)Find first bad version from n versions

/* The isBadVersion API is defined in the parent class VersionControl.
      boolean isBadVersion(int version); */

//here the target is isBadVersion function and we need to find leftmost version/first version which is bad
public class Solution extends VersionControl {
    public int firstBadVersion(int n) {

        int l=1;
        int r=n;
        int m=0;
        while(l<=r)
        {
            //to avoid overflow for signed no due to l+r , we use this
            m=l+(r-l)/2;
            //mid version is not bad
            if(isBadVersion(m)==false)
            {
                    l=m+1;//start index change
            }
            else
            {
                //true
                    r=m-1;//end index change
                
            }

        }
        return l;
    
    }
}


6)You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.

Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.

class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        //since we need to find smallest letter gerater than target
       // if target is a,then we pass b so that it will return its future index irrespective of its existance
       char next=(char)(((int)target) + 1);
     //  System.out.println("next is"+next);
        int l=doBinarySearch(letters,next);
        //  System.out.println("l is"+l);
        if(letters.length==l)//dont include 2nd condition
        {
            return letters[0];
        }
        else
        {
            return letters[l];//smallest character after target
        }

    }
    public int doBinarySearch(char[] letters, char target)
    {
        int l=0;
        int r=letters.length;
        int m=0;
        while(l<r)
        {
            m=(l+r)/2;
            if(letters[m]<target)
            {
                l=m+1;
            }
            else
            {
                r=m;
            }
        }
        return l;
        
    }
	
	
7)
https://leetcode.com/problems/sqrtx/

Given a non-negative integer x, return the square root of x rounded down to the nearest integer. The returned integer should be non-negative as well.


class Solution {
    public int mySqrt(int x) {
long l=1;
long r=x;
long min=0;
long m=0;

    while(l<=r){
        m=l+(r-l)/2;
    
    if(m*m<=x){
        min=m;
        l=m+1;
    }
    else if(m*m>=x){
        r=m-1;
    }
}
    return (int)min;
}
}	


